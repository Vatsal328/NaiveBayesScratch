# -*- coding: utf-8 -*-
"""B22CS059_myLDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1noE4D68y4AuVOwx-Mx-uZXzwiCcoN5BE
"""

#This is a helper code for problem-1 (Task-1) of PA-4
#Complete this code by writing the function definations
#Compute following terms and print them:\\
#1. Difference of class wise means = ${m_1-m_2}$\\
#2. Total Within-class Scatter Matrix $S_W$\\
#3. Between-class Scatter Matrix $S_B$\\
#4. The EigenVectors of matrix $S_W^{-1}S_B$ corresponding to highest EigenValue\\
#5. For any input 2-D point, print its projection according to LDA.

import csv
import numpy as np
import pandas as pd

def ComputeMeanDiff(X):
    c_0 = X[X[:, 2] == 0][:, :2].astype(float) # Class 0
    c_1 = X[X[:, 2] == 1][:, :2].astype(float) # Class 1
    meanDiff = np.mean(c_1, axis=0) - np.mean(c_0, axis=0) # Refer the formula
    return meanDiff

def ComputeSW(X):
    c_0 = X[X[:, 2] == 0][:, :2].astype(float)
    c_1 = X[X[:, 2] == 1][:, :2].astype(float)
    mean_0 = np.mean(c_0, axis=0)
    mean_1 = np.mean(c_1, axis=0)
    sw_0 = np.dot((c_0 - mean_0).T, (c_0 - mean_0)) # Refer the formula
    sw_1 = np.dot((c_1 - mean_1).T, (c_1 - mean_1))
    return sw_0 + sw_1

def ComputeSB(X):
    c_0 = X[X[:, 2] == 0][:, :2].astype(float)
    c_1 = X[X[:, 2] == 1][:, :2].astype(float)
    mean_0 = np.mean(c_0, axis=0)
    mean_1 = np.mean(c_1, axis=0)
    sb = np.dot((mean_0 - mean_1).T, (mean_0 - mean_1)) # Refer the formula
    return sb

def GetLDAProjectionVector(X):
    sw = ComputeSW(X)
    sb = ComputeSB(X)
    evals, evecs = np.linalg.eig(np.dot(np.linalg.inv(sw), sb)) # Refer the formula
    idx = np.argmax(evals)
    w = evecs[:, idx]
    return w

def project(x,y,w):
    point = np.array([x, y])
    return np.dot(point, w)

#########################################################
###################Helper Code###########################
#########################################################


# Read the dataset (use this method to (rather than opening the csv file and then reading) to avoid strings)
data = pd.read_csv('data.csv', header=None)

# Convert to numpy array
X = data.to_numpy()

print(X)
print(X.shape)
# X Contains m samples each of formate (x,y) and class label 0.0 or 1.0

opt=int(input("Input your option (1-5): "))

match opt:
    case 1:
        meanDiff=ComputeMeanDiff(X)
        print(meanDiff)
    case 2:
        SW=ComputeSW(X)
        print(SW)
    case 3:
        SB=ComputeSB(X)
        print(SB)
    case 4:
        w=GetLDAProjectionVector(X)
        print(w)
    case 5:
        x=int(input("Input x dimension of a 2-dimensional point :"))
        y=int(input("Input y dimension of a 2-dimensional point:"))
        w=GetLDAProjectionVector(X)
        print(project(x,y,w))